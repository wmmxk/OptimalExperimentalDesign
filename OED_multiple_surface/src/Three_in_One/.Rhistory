setwd("~/Git/OED/OED_multiple_surface/src/Three_in_One")
source("../setpath.R")
library(mlegp)
# args = commandArgs(TRUE)
# set_id = args[1]
# noise_level = as.integer(args[2])
# random_seed = as.integer(args[3])
# method = args[4]
#
# add = as.integer(args[5])
# iter_num = as.integer(args[6])
set_id = 2
noise_level = 0
random_seed = 1
method = "EN"
iter_num = 180
add = 1
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
train_bad = train
errors = as.numeric()
ptm <- proc.time()
indexes = as.numeric()
for (p in 1:(iter_num+1))
{
cat("iteration: ",p-1, "\n")
cat(" Before train size", nrow(train_bad),"\n")
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
cat("iteration: ",p-1,"\n")
cat("train size", nrow(train_bad),"\n")
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
if (add==1 && (p%%5==0)) {
select_index = c(1)
}
indexes = c(indexes,select_index[1])
res = update_train_pool(select_index,train,train_bad,pool,pool_all,noise_level)
train = res$train
pool = res$pool
pool_all = res$pool_all
train_bad = res$train_bad
}
save_res(out_data_path,set_id,noise_level,random_seed,add,iter_num,errors,train_bad,method)
#
plot(errors)
indexes
errors
setwd("~/Git/OED/OED_multiple_surface/src/Three_in_One")
source("../setpath.R")
library(mlegp)
# args = commandArgs(TRUE)
# set_id = args[1]
# noise_level = as.integer(args[2])
# random_seed = as.integer(args[3])
# method = args[4]
#
# add = as.integer(args[5])
# iter_num = as.integer(args[6])
set_id = 3
noise_level = 6
random_seed = 1
method = "EN"
iter_num = 150
add = 1
pool_size = 600
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
dim(train)
dim(pool)
dim(pool_all)
dim(benchmark)
train_bad = train
errors = as.numeric()
ptm <- proc.time()
indexes = as.numeric()
for (p in 1:(iter_num+1))
{
cat("iteration: ",p-1, "\n")
cat(" Before train size", nrow(train_bad),"\n")
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
cat("iteration: ",p-1,"\n")
cat("train size", nrow(train_bad),"\n")
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
if (add==1 && (p%%5==0)) {
select_index = c(1)
}
indexes = c(indexes,select_index[1])
res = update_train_pool(select_index,train,train_bad,pool,pool_all,noise_level)
train = res$train
pool = res$pool
pool_all = res$pool_all
train_bad = res$train_bad
save_res(out_data_path,set_id,noise_level,random_seed,add,iter_num,errors,train_bad,method,bad=FALSE)
save_res(out_data_path,set_id,noise_level,random_seed,add,iter_num,errors,train,method,bad=FALSE)
}
#
source("../setpath.R")
library(mlegp)
# args = commandArgs(TRUE)
# set_id = args[1]
# noise_level = as.integer(args[2])
# random_seed = as.integer(args[3])
# method = args[4]
#
# add = as.integer(args[5])
# iter_num = as.integer(args[6])
set_id = 3
noise_level = 6
random_seed = 1
method = "EN"
iter_num = 150
add = 1
pool_size = 600
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
train_bad = train
errors = as.numeric()
ptm <- proc.time()
indexes = as.numeric()
for (p in 1:(iter_num+1))
{
cat("iteration: ",p-1, "\n")
cat(" Before train size", nrow(train_bad),"\n")
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
cat("iteration: ",p-1,"\n")
cat("train size", nrow(train_bad),"\n")
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
if (add==1 && (p%%5==0)) {
select_index = c(1)
}
indexes = c(indexes,select_index[1])
res = update_train_pool(select_index,train,train_bad,pool,pool_all,noise_level)
train = res$train
pool = res$pool
pool_all = res$pool_all
train_bad = res$train_bad
save_res(out_data_path,set_id,noise_level,random_seed,add,iter_num,errors,train_bad,method,bad=TRUE)
save_res(out_data_path,set_id,noise_level,random_seed,add,iter_num,errors,train,method,bad=FALSE)
}
seq(0,3,1)
seq(0,1,1)
seq(0,0,1)
setwd("~/Git/OED/OED_multiple_surface/src/Three_in_One")
source("../setpath.R")
library(mlegp)
# args = commandArgs(TRUE)
# set_id = args[1]
# noise_level = as.integer(args[2])
# random_seed = as.integer(args[3])
# method = args[4]
#
# add = as.integer(args[5])
# iter_num = as.integer(args[6])
set_id = 3
noise_level = 6
random_seed = 1
method = "EN"
iter_num = 150
add = 1
pool_size = 600
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
train_bad = train
errors = as.numeric()
ptm <- proc.time()
indexes = as.numeric()
for (p in 1:(iter_num+1))
{
cat("iteration: ",p-1, "\n")
cat(" Before train size", nrow(train_bad),"\n")
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
cat("iteration: ",p-1,"\n")
cat("train size", nrow(train_bad),"\n")
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
if (add==1 && (p%%5==0)) {
select_index = c(1)
}
indexes = c(indexes,select_index[1])
res = update_train_pool(select_index,train,train_bad,pool,pool_all,noise_level)
train = res$train
pool = res$pool
pool_all = res$pool_all
train_bad = res$train_bad
save_res(out_data_path,set_id,noise_level,random_seed,add,iter_num,errors,train_bad,method,bad=TRUE,epoch=p)
save_res(out_data_path,set_id,noise_level,random_seed,add,iter_num,errors,train,method,bad=FALSE,epoch=p)
}
