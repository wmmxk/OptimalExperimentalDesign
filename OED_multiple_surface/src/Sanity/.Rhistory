for (p in 174:(iter_num+1))
{
cat("iteration: ",p-1, "\n")
cat(" Before train size", nrow(train_bad),"\n")
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
cat("iteration: ",p-1,"\n")
cat("train size", nrow(train_bad),"\n")
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
# if (add==1 && (p%%5==0)) {
#   select_index = c(1)
# }
indexes = c(indexes,select_index[1])
res = update_train_pool(select_index,train,train_bad,pool,pool_all,noise_level)
train = res$train
pool = res$pool
pool_all = res$pool_all
train_bad = res$train_bad
}
setwd("~/Git/OED/OED_multiple_surface/src/Three_in_One")
source("../setpath.R")
library(mlegp)
# args = commandArgs(TRUE)
# set_id = args[1]
# noise_level = as.integer(args[2])
# random_seed = as.integer(args[3])
# method = args[4]
#
# add = as.integer(args[5])
# iter_num = as.integer(args[6])
set_id = 2
noise_level = 0
random_seed = 1
method = "EN"
iter_num = 180
add = 1
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
train_bad = train
errors = as.numeric()
ptm <- proc.time()
indexes = as.numeric()
for (p in 1:(iter_num+1))
{
cat("iteration: ",p-1, "\n")
cat(" Before train size", nrow(train_bad),"\n")
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
cat("iteration: ",p-1,"\n")
cat("train size", nrow(train_bad),"\n")
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
# if (add==1 && (p%%5==0)) {
#   select_index = c(1)
# }
indexes = c(indexes,select_index[1])
res = update_train_pool(select_index,train,train_bad,pool,pool_all,noise_level)
train = res$train
pool = res$pool
pool_all = res$pool_all
train_bad = res$train_bad
}
save_res(out_data_path,set_id,noise_level,random_seed,add,iter_num,errors,train_bad,method)
#
plot(errors)
indexes
plot(errors)
errors
setwd("~/Git/OED/OED_multiple_surface/src/Sanity")
source("../setpath.R")
library(mlegp)
set_id = 4
noise_level = 1
random_seed = 1
method = "MI"
add = 2
iter_num = 30
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level)
train = data$train
pool = data$pool
dim(pool)
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 550)
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 550)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
dim(pool)
dim(pool_all)
dim(benchmark)
source("../setpath.R")
library(mlegp)
set_id = 4
noise_level = 1
random_seed = 1
method = "MI"
add = 2
iter_num = 30
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 550)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
dim(pool)
dim(pool_all)
dim(train)
50+550+552
start_size
pool_size
source("../setpath.R")
library(mlegp)
set_id = 4
noise_level = 1
random_seed = 1
method = "MI"
add = 2
iter_num = 30
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 550)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
dim(train)
dim(pool)
dim(pool_all)
dim(benh)
dim(benchmark)
dim(data_all)
source("../setpath.R")
library(mlegp)
set_id = 4
noise_level = 1
random_seed = 1
method = "MI"
add = 2
iter_num = 30
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 550)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
source("../setpath.R")
library(mlegp)
set_id = 4
noise_level = 1
random_seed = 1
method = "MI"
add = 2
iter_num = 30
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 550)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
seq(500,1100,200)
source("../setpath.R")
library(mlegp)
set_id = 4
noise_level = 1
random_seed = 1
method = "MI"
add = 2
iter_num = 30
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
times_tr = as.numeric()
times_en = as.numeric()
times_mi = as.numeric()
start_size
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 550)
train = data$train
pool = data$pool
ptm <- proc.time()
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
ptm1 <- proc.time()
a = ptm1 - ptm
times_tr = c(times_tr, a[2])
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
ptm2 <- proc.time()
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
ptm3 <- proc.time()
b = ptm3 - ptm2
times_mi = c(times_mi,b[3])
ptm4 <- proc.time()
select_index = screen_index(fit,train,pool,add,"EN")# This part is different for different OED method
ptm5 <- proc.time()
c = ptm5 - ptm4
times_en = c(times_en,c[3])
times_en
times_mi
times_tr
dim(train)
setwd("~/Git/OED/OED_multiple_surface/src/Sanity")
source("../setpath.R")
library(mlegp)
set_id = 4
noise_level = 1
random_seed = 1
method = "MI"
add = 2
iter_num = 30
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
times_tr = as.numeric()
times_en = as.numeric()
times_mi = as.numeric()
for (start_size in seq(50,550,100)) {
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 600)
train = data$train
pool = data$pool
ptm <- proc.time()
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
ptm1 <- proc.time()
a = ptm1 - ptm
times_tr = c(times_tr, a[2])
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
ptm2 <- proc.time()
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
ptm3 <- proc.time()
b = ptm3 - ptm2
times_mi = c(times_mi,b[3])
ptm4 <- proc.time()
select_index = screen_index(fit,train,pool,add,"EN")# This part is different for different OED method
ptm5 <- proc.time()
c = ptm5 - ptm4
times_en = c(times_en,c[3])
}
for (start_size in seq(50,180,30)) {
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 600)
train = data$train
pool = data$pool
ptm <- proc.time()
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
ptm1 <- proc.time()
a = ptm1 - ptm
times_tr = c(times_tr, a[2])
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
ptm2 <- proc.time()
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
ptm3 <- proc.time()
b = ptm3 - ptm2
times_mi = c(times_mi,b[3])
ptm4 <- proc.time()
select_index = screen_index(fit,train,pool,add,"EN")# This part is different for different OED method
ptm5 <- proc.time()
c = ptm5 - ptm4
times_en = c(times_en,c[3])
}
setwd("~/Git/OED/OED_multiple_surface/src/Sanity")
source("../setpath.R")
library(mlegp)
set_id = 4
noise_level = 1
random_seed = 1
method = "MI"
add = 2
iter_num = 30
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
times_tr = as.numeric()
times_en = as.numeric()
times_mi = as.numeric()
for (start_size in seq(50,180,30)) {
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 600)
train = data$train
pool = data$pool
ptm <- proc.time()
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
ptm1 <- proc.time()
a = ptm1 - ptm
times_tr = c(times_tr, a[2])
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
ptm2 <- proc.time()
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
ptm3 <- proc.time()
b = ptm3 - ptm2
times_mi = c(times_mi,b[3])
ptm4 <- proc.time()
select_index = screen_index(fit,train,pool,add,"EN")# This part is different for different OED method
ptm5 <- proc.time()
c = ptm5 - ptm4
times_en = c(times_en,c[3])
}
times_tr
times_en
times_mi
start_size = 80
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 600)
train = data$train
pool = data$pool
ptm <- proc.time()
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 600)
train = data$train
pool = data$pool
ptm <- proc.time()
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
ptm1 <- proc.time()
a = ptm1 - ptm
a
times_en
times_tr
plot(seq(50,180,30),times_tr)
times_tr = as.numeric()
times_en = as.numeric()
times_mi = as.numeric()
train_size = as.numeric()
for (start_size in seq(50,90,30)) {
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 600)
train = data$train
pool = data$pool
train_size = c(train_size,nrow(train))
ptm <- proc.time()
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
ptm1 <- proc.time()
a = ptm1 - ptm
times_tr = c(times_tr, a[2])
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
ptm2 <- proc.time()
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
ptm3 <- proc.time()
b = ptm3 - ptm2
times_mi = c(times_mi,b[3])
ptm4 <- proc.time()
select_index = screen_index(fit,train,pool,add,"EN")# This part is different for different OED method
ptm5 <- proc.time()
c = ptm5 - ptm4
times_en = c(times_en,c[3])
}
times_tr
rbind(times_tr,times_en)
x = NULL
rbind(x,times_tr,times_en)
res = NULL
for (i in 1:3){
res = rbind(res,seq(1,5,2)
}
res = NULL
for (i in 1:3) {
res = rbind(res,seq(1,5,2)
}
res = NULL
for (i in 1:3) {
res = rbind(res,seq(1,5,2))
}
res
for (repeat in 1:3)
{
times_tr = as.numeric()
times_en = as.numeric()
times_mi = as.numeric()
train_size = as.numeric()
res = NULL
for (start_size in seq(50,90,30)) {
data = prepare_train(file_path,random_seed,start_size,noise_level,pool_size = 600)
train = data$train
pool = data$pool
train_size = c(train_size,nrow(train))
ptm <- proc.time()
model_tr = train_GP(train,add)
fit = model_tr$model
train = model_tr$train
ptm1 <- proc.time()
a = ptm1 - ptm
times_tr = c(times_tr, a[2])
errors[p] =  predict_benchmark(fit,train,benchmark,unfold=FALSE)
ptm2 <- proc.time()
select_index = screen_index(fit,train,pool,add,method)# This part is different for different OED method
ptm3 <- proc.time()
b = ptm3 - ptm2
times_mi = c(times_mi,b[3])
ptm4 <- proc.time()
select_index = screen_index(fit,train,pool,add,"EN")# This part is different for different OED method
ptm5 <- proc.time()
c = ptm5 - ptm4
times_en = c(times_en,c[3])
}
res = rbind(times_tr,times_en,times_mi)
}
res = rbind(train_size,res)
res
source("../setpath.R")
library(mlegp)
# args = commandArgs(TRUE)
# set_id = args[1]
# noise_level = as.integer(args[2])
# random_seed = as.integer(args[3])
# method = args[4]
#
# add = as.integer(args[5])
# iter_num = as.integer(args[6])
set_id = 2
noise_level = 0
random_seed = 1
method = "EN"
iter_num = 180
add = 1
pool_size = 650
start_size = 50
file_path = file.path(data_path,paste(set_id,".csv",sep=""))
Rcodes = c("prepare_train.R","compute_kernel.R","predict_benchmark.R",
"update_train_pool.R","save_res.R","screen_index.R",
"train_GP.R","max_dist.R","compute_MI_denominator.R")
for (Rcode in Rcodes) {
source(file.path(helper_path,Rcode))
}
data = prepare_train(file_path,random_seed,start_size,noise_level)
train = data$train
pool = data$pool
pool_all = data$pool_all
benchmark = data$benchmark
dim(train)
rnorm(nrow(train),0,train[,3])
noise = rnorm(nrow(train),0,train[,3])
plot(train[,3],noise)
noise = rnorm(nrow(train),0,train[,3]*0.03)
plot(train[,3],noise)
